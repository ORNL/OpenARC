cmake_minimum_required(VERSION 3.18)
project(OpenARC)

set(OPENARC_VERSION_MAJOR 1)
set(OPENARC_VERSION_MINOR 0)
set(OPENARC_VERSION_PATCH 0)

# Find Java and set JAVA_HOME
find_package(Java COMPONENTS Development REQUIRED)
set(JAVA_HOME ${JAVA_HOME})
include(UseJava)

# CMake variables for OpenARC
option(OPENARC_ENABLE_LLVM "Enable support for the LLVM backend" OFF)
option(OPENARC_ENABLE_OPENMP "Enable OpenMP for multithreading host" OFF)
option(OPENARC_ENABLE_CUDA "Enable the CUDA backend" OFF)
IF(OPENARC_C_PREPROCESSOR)
set(OPENARC_CPP ${OPENARC_C_PREPROCESSOR})
ELSE()
set(OPENARC_CPP "gcc -E -std=c99")
ENDIF()


IF(DEFINED ENV{OPENARC_ARCH})
set(OPENARC_TARGET_ARCH $ENV{OPENARC_ARCH})
ELSE()
set(OPENARC_TARGET_ARCH 0)
ENDIF()

IF(OPENARC_ENABLE_OPENMP)
	IF(NOT (OPENARC_TARGET_ARCH STREQUAL 0))
		# Enable OpenMP support
		find_package(OpenMP REQUIRED)
	ENDIF()
ENDIF()

IF(DEFINED ENV{OPENARCRT_USE_BRISBANE})
set(OPENARC_USE_BRISBANE $ENV{OPENARCRT_USE_BRISBANE})
ELSE()
set(OPENARC_USE_BRISBANE 0)
ENDIF()

IF(DEFINED ENV{OPENARC_VICTIM_CACHE_MODE})
set(VICTIM_CACHE_MODE $ENV{OPENARC_VICTIM_CACHE_MODE})
ELSE()
set(VICTIM_CACHE_MODE 1)
ENDIF()

IF(OPENARC_TARGET_ARCH STREQUAL 0)
# Find CUDA package
find_package(CUDAToolkit REQUIRED)
set(TARGET_MAKE_HEADER make.header.CUDA)
set(OPENARC_ENABLE_CUDA ON)
ELSEIF(OPENARC_TARGET_ARCH STREQUAL 5)
# Find HIP package
find_package(HIP REQUIRED)
set(TARGET_MAKE_HEADER make.header.HIP)
ELSEIF(OPENARC_TARGET_ARCH STREQUAL 6)
	IF(OPENARC_USE_BRISBANE STREQUAL 1)
	# Use BRISBANE backend
	set(TARGET_MAKE_HEADER make.header.BRISBANE)
	IF(DEFINED ENV{BRISBANE_ARCHS})
		set(ENV_BRISBANE_ARCHS "$ENV{BRISBANE_ARCHS}")
		string(FIND "${ENV_BRISBANE_ARCHS}" "cuda" index)
		IF(NOT index EQUAL -1)
			find_package(CUDAToolkit REQUIRED)
			set(OPENARC_ENABLE_CUDA ON)
		ENDIF()
	ENDIF()
	ELSE()
	# Use IRIS backend
	set(TARGET_MAKE_HEADER make.header.IRIS)
	IF(DEFINED ENV{IRIS_ARCHS})
		set(ENV_IRIS_ARCHS "$ENV{IRIS_ARCHS}")
		string(FIND "${ENV_IRIS_ARCHS}" "cuda" index)
		IF(NOT index EQUAL -1)
			find_package(CUDAToolkit REQUIRED)
			set(OPENARC_ENABLE_CUDA ON)
		ENDIF()
	ENDIF()
	ENDIF()
ELSE()
# Find OpenCL package
find_package(OpenCL REQUIRED)
	IF(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
	set(TARGET_MAKE_HEADER make.header.OSX)
	ELSEIF(OPENARC_TARGET_ARCH STREQUAL 3)
	set(TARGET_MAKE_HEADER make.header.INTELFPGA)
	ELSE()
	set(TARGET_MAKE_HEADER make.header.OPENCL)
	ENDIF()
ENDIF()

# Set up Java source and target directories
set(OPENARC_SRC_DIR ${PROJECT_SOURCE_DIR}/src)
set(OPENARC_RUNTIME_DIR ${PROJECT_SOURCE_DIR}/openarcrt)
set(EXTERNAL_LIBS ${PROJECT_SOURCE_DIR}/lib)
IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
set(OPENARC_INSTALL_DIR ${PROJECT_SOURCE_DIR}/install)
ELSE()
set(OPENARC_INSTALL_DIR ${CMAKE_INSTALL_PREFIX})
ENDIF()

add_subdirectory(src)
add_subdirectory(openarcrt)

add_custom_command(
	OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/openarc.sh
	COMMAND echo "#!/bin/sh" > ${CMAKE_CURRENT_BINARY_DIR}/openarc.sh VERBATIM
	COMMAND echo "# This file was generated automatically by CMake." >> ${CMAKE_CURRENT_BINARY_DIR}/openarc.sh VERBATIM
	COMMAND echo "java -cp ${OPENARC_INSTALL_DIR}/lib/antlr.jar:${OPENARC_INSTALL_DIR}/lib/cetus.jar -Xmx1g openacc.exec.ACC2GPUDriver \$*" >> ${CMAKE_CURRENT_BINARY_DIR}/openarc.sh VERBATIM
	COMMAND chmod 755 ${CMAKE_CURRENT_BINARY_DIR}/openarc.sh
	)

add_custom_target(
	gen_openarc ALL DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/openarc.sh)

add_custom_target(
	makeheader ALL cp ${PROJECT_SOURCE_DIR}/makefiles/${TARGET_MAKE_HEADER} ${PROJECT_SOURCE_DIR}/make.header)

install(FILES ${CMAKE_CURRENT_BINARY_DIR}/openarc.sh 
	DESTINATION ${OPENARC_INSTALL_DIR}/bin
	PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
install(FILES ${OPENARC_RUNTIME_DIR}/openacc.h 
	DESTINATION ${OPENARC_INSTALL_DIR}/include)
install(FILES ${OPENARC_RUNTIME_DIR}/openaccrt.h 
	DESTINATION ${OPENARC_INSTALL_DIR}/include)
install(FILES ${OPENARC_RUNTIME_DIR}/omp4_device.h 
	DESTINATION ${OPENARC_INSTALL_DIR}/include)
install(FILES ${OPENARC_RUNTIME_DIR}/omp_helper.h 
	DESTINATION ${OPENARC_INSTALL_DIR}/include)
install(FILES ${OPENARC_RUNTIME_DIR}/mcl_accext.h 
	DESTINATION ${OPENARC_INSTALL_DIR}/include)
install(FILES ${OPENARC_RUNTIME_DIR}/profile.h 
	DESTINATION ${OPENARC_INSTALL_DIR}/include)
install(FILES ${OPENARC_RUNTIME_DIR}/resilience.h 
	DESTINATION ${OPENARC_INSTALL_DIR}/include)
install(FILES ${OPENARC_RUNTIME_DIR}/resilience.cu 
	DESTINATION ${OPENARC_INSTALL_DIR}/include)
install(FILES ${OPENARC_RUNTIME_DIR}/resilience.cl 
	DESTINATION ${OPENARC_INSTALL_DIR}/include)
install(FILES ${OPENARC_RUNTIME_DIR}/Makefile.buildIRISKernels 
	DESTINATION ${OPENARC_INSTALL_DIR}/)
install(FILES ${PROJECT_SOURCE_DIR}/make.template
	DESTINATION ${OPENARC_INSTALL_DIR}/)
install(FILES ${PROJECT_SOURCE_DIR}/make.header
	DESTINATION ${OPENARC_INSTALL_DIR}/)

