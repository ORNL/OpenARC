#! /bin/bash
MPI=0
VERIFY=0
MERGE=1
GRAPH=0
BENCHMARK=0
while [ "$1" != "" ]; do
    PARAM=`echo $1 | awk -F= '{print $1}'`
    VALUE=`echo $1 | awk -F= '{print $2}'`
    case $PARAM in
        MPI)
            MPI=1
            echo "==> Enable MPI support"
            ;;  
        VERIFY)
            VERIFY=1
            echo "==> Enable a verification mode"
            ;;  
        MERGE)
            MERGE=1
            echo "==> Merge adjacent IRIS tasks"
            ;;  
        NOMERGE)
            MERGE=0
            echo "==> Do not merge adjacent IRIS tasks"
            ;;  
        GRAPH)
            GRAPH=0
            echo "==> Submit IRIS task graph"
            ;;  
        BENCHMARK)
            BENCHMARK=1
            echo "==> Enable a benchmark mode"
            ;;  
        *)  
            echo "ERROR: unknown parameter \"$PARAM\""
            exit 1
            ;;  
    esac
    shift
done


verLevel=0
mpiinclude="/opt/cray/mpt/6.3.0/gni/mpich2-intel/130/include"

if [ "${OPENARC_INSTALL_ROOT}" = "" ]; then
    OPENARC_INSTALL_ROOT=${openarc}/install
fi
if [ ! -f "${OPENARC_INSTALL_ROOT}/make.header" ]; then
    echo "====> Cannot find OpenARC install directory; set environment variable, OPENARC_INSTALL_ROOT properly!"
    exit
fi

openarcinc="${OPENARC_INSTALL_ROOT}/include"
openarclib="${OPENARC_INSTALL_ROOT}/lib"
openarcbin="${OPENARC_INSTALL_ROOT}/bin"

sources=( "CalculateXS.c" "GridInit.c" "Main.c" "Materials.c" "XSutils.c" "io.c" )

if [ ! -f "openarcConf.txt" ]; then
    cp "openarcConf_NORMAL.txt" "openarcConf.txt"
fi

if [ "$mpiinclude" != "" ]; then
    mv "openarcConf.txt" "openarcConf.txt_tmp"
    cat "openarcConf.txt_tmp" | sed "s|__mpiinclude__|${mpiinclude}|g" > "openarcConf.txt"
    rm "openarcConf.txt_tmp"
fi

if [ "$openarcinc" != "" ]; then
    mv "openarcConf.txt" "openarcConf.txt_tmp"
    cat "openarcConf.txt_tmp" | sed "s|__openarcrt__|${openarcinc}|g" > "openarcConf.txt"
    rm "openarcConf.txt_tmp"
fi

if [ "$OPENARC_ARCH" != "" ]; then
    mv "openarcConf.txt" "openarcConf.txt_tmp"
    cat "openarcConf.txt_tmp" | sed "s|__openarc_arch__|${OPENARC_ARCH}|g" > "openarcConf.txt"
    rm "openarcConf.txt_tmp"
else
    mv "openarcConf.txt" "openarcConf.txt_tmp"
    cat "openarcConf.txt_tmp" | sed "s|__openarc_arch__|0|g" > "openarcConf.txt"
    rm "openarcConf.txt_tmp"
fi

if [ "$MPI" == "1" ]; then
    mv "openarcConf.txt" "openarcConf.txt_tmp"
    cat "openarcConf.txt_tmp" | sed "s|^macro=|&MPI,|g" > "openarcConf.txt"
    rm "openarcConf.txt_tmp"
fi

if [ "$VERIFY" == "1" ]; then
    mv "openarcConf.txt" "openarcConf.txt_tmp"
    cat "openarcConf.txt_tmp" | sed "s|^macro=|&VERIFICATION=1,|g" > "openarcConf.txt"
    rm "openarcConf.txt_tmp"
fi

if [ "$MERGE" == "1" ]; then
    mv "openarcConf.txt" "openarcConf.txt_tmp"
    cat "openarcConf.txt_tmp" | sed "s|^macro=|&MERGE_TASKS,|g" > "openarcConf.txt"
    rm "openarcConf.txt_tmp"
fi

if [ "$GRAPH" == "1" ]; then
    mv "openarcConf.txt" "openarcConf.txt_tmp"
    cat "openarcConf.txt_tmp" | sed "s|^macro=|&GRAPH,|g" > "openarcConf.txt"
    rm "openarcConf.txt_tmp"
fi

if [ "$BENCHMARK" == "1" ]; then
    mv "openarcConf.txt" "openarcConf.txt_tmp"
    cat "openarcConf.txt_tmp" | sed "s|^macro=|&BENCHMARK,|g" > "openarcConf.txt"
    rm "openarcConf.txt_tmp"
fi

java -classpath $openarclib/cetus.jar:$openarclib/antlr.jar openacc.exec.ACC2GPUDriver -verbosity=${verLevel} -gpuConfFile=openarcConf.txt "${sources[@]}"

if [ ! -d ./bin ]; then
    mkdir bin
fi
echo "====> To compile the translated output file:"
echo "\$ make"
echo ""
echo "====> To run the compiled binary:"
echo "\$ cd bin; xsbench_ACC -s small"
echo ""
echo "====> Available options:"
echo "-i <iterations>  Number of iterations (default: 1)"
echo "-d <devices>  Number of devices (default: 1)"
echo "-s <size>        Size of H-M Benchmark to run (small, large, XL, XXL)"
echo "-g <gridpoints>  Number of gridpoints per nuclide"
echo "-l <lookups>     Number of Cross-section (XS) lookups"
echo "-am <asyncMode>  Set the asynchronous Mode (default: 2)"
echo "Default (no arguments given) is equivalent to: -s large -l 15000000 -i 1 -d 1"


