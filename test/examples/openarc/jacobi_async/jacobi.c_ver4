#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>
#include <math.h>
#if OMP == 1
#include <omp.h>
#endif
#include "openacc.h"

#ifndef VERIFICATION
#define VERIFICATION 0
#endif

#ifndef LOOP_TILING
#define LOOP_TILING 0
#endif

#define ITER 	10

#ifndef ASIZE
#define ASIZE 	2048 //128 * 16
//#define ASIZE    4096 //256 * 16
//#define ASIZE    8192 //256 * 32
//#define ASIZE  12288 //256 * 48
#ifdef _OPENARC_
#pragma openarc #define ASIZE 2048
#endif
#endif

#define ASIZE_1 	(ASIZE+1)
#define ASIZE_2 	(ASIZE+2)

#ifdef _OPENARC_
#pragma openarc #define ASIZE_2 (2+ASIZE)
#endif

#define CHECK_RESULT

double my_timer ()
{
    struct timeval time;

    gettimeofday (&time, 0);

    return time.tv_sec + time.tv_usec / 1000000.0;
}

/* Helper function for converting strings to ints, with error checking */
int StrToInt(const char *token, int *retVal)
{
  const char *c ;
  char *endptr ;
  const int decimal_base = 10 ;

  if (token == NULL)
    return 0 ;

  c = token ;
  *retVal = (int)strtol(c, &endptr, decimal_base) ;
  if((endptr != c) && ((*endptr == ' ') || (*endptr == '\0')))
    return 1 ;
  else
    return 0 ;
}

float a[ASIZE_2][ASIZE_2];
float b[ASIZE_2][ASIZE_2];

int main (int argc, char *argv[])
{
    int i, j, k;
    //int c;
    int num_itr = 0;
    float sum = 0.0f;

    double strt_time, done_time;

    acc_device_t devType = acc_device_default;
    acc_init(devType);
    acc_set_device_num(0, devType);
    printf("Current device number = %d\n", acc_get_device_num(devType));

#if VERIFICATION >= 1
	float** a_CPU = (float**)malloc(sizeof(float*) * ASIZE_2);
	float** b_CPU = (float**)malloc(sizeof(float*) * ASIZE_2);

	float* a_data = (float*)malloc(sizeof(float) * ASIZE_2 * ASIZE_2);
	float* b_data = (float*)malloc(sizeof(float) * ASIZE_2 * ASIZE_2);

	for(i = 0; i < ASIZE_2; i++)
	{
		a_CPU[i] = &a_data[i * ASIZE_2];
		b_CPU[i] = &b_data[i * ASIZE_2];
	}

#endif 

	if( argc > 1 ) {
		i = 1;
		while( i< argc ) {
			int ok;
			if(strcmp(argv[i], "-i") == 0) {
				if (i+1 >= argc) {
					printf("Missing integer argument to -i");
				}
				ok = StrToInt(argv[i+1], &(num_itr));
				if(!ok) {
					printf("Parse Error on option -i integer value required after argument\n");
				}   
				i+=2;
			} else {
				printf("Invalid commandline option: %s\n", argv[i]);
				exit(1);
			}   
		}
	}

	if( num_itr == 0 ) {
		num_itr = ITER;
	}

    for (i = 0; i < ASIZE_2; i++)
    {
        for (j = 0; j < ASIZE_2; j++)
        {
            b[i][j] = 0;
#if VERIFICATION >= 1
			b_CPU[i][j] = 0;
#endif 
        }
    }

    for (j = 0; j <= ASIZE_1; j++)
    {
        b[j][0] = 1.0;
        b[j][ASIZE_1] = 1.0;

#if VERIFICATION >= 1
		b_CPU[j][0] = 1.0;
		b_CPU[j][ASIZE_1] = 1.0;
#endif 

    }
    for (i = 1; i <= ASIZE; i++)
    {
        b[0][i] = 1.0;
        b[ASIZE_1][i] = 1.0;

#if VERIFICATION >= 1
		b_CPU[0][i] = 1.0;
		b_CPU[ASIZE_1][i] = 1.0;
#endif 
    }

    printf ("Performing %d iterations on a %d by %d array\n", num_itr, ASIZE, ASIZE);

    /* -- Timing starts before the main loop -- */
    printf("-------------------------------------------------------------\n");

    strt_time = my_timer ();
	
#pragma acc data create(b[0:ASIZE_2][0:ASIZE_2]), create(a[0:ASIZE_2][0:ASIZE_2])
    for (k = 0; k < num_itr; k++)
    {
		if( k == 0 ) {
			acc_memcpy_to_device_async(acc_deviceptr(b), b, sizeof(float)*ASIZE_2*ASIZE_2, 1);
		}

#pragma openarc cuda noconstant(b)
#pragma acc kernels loop independent present(b[0:ASIZE_2][0:ASIZE_2]), present(a[0:ASIZE_2][0:ASIZE_2]) async(1)
        for (i = 1; i <= ASIZE; i++)
        {
#pragma acc loop independent
            for (j = 1; j <= ASIZE; j++)
            {
                a[i][j] = (b[i - 1][j] + b[i + 1][j] + b[i][j - 1] + b[i][j + 1]) / 4.0f;
            }
        }

		acc_memcpy_device_async(acc_deviceptr(b), acc_deviceptr(a), sizeof(float)*ASIZE_2*ASIZE_2, 1);
		if( k == (num_itr-1) ) {
			acc_memcpy_from_device_async(b, acc_deviceptr(b), sizeof(float)*ASIZE_2*ASIZE_2, 1);
		}

    }
#pragma acc wait(1)

    done_time = my_timer ();
    printf ("Accelerator Elapsed time = %lf sec\n", done_time - strt_time);

#if VERIFICATION >= 1

    strt_time = my_timer ();

    for (k = 0; k < num_itr; k++)
    {
#if LOOP_TILING == 1
#pragma acc loop tile(16,16)
#endif
#pragma omp parallel for shared(a_CPU,b_CPU) private(i,j)
        for (i = 1; i <= ASIZE; i++)
        {
            for (j = 1; j <= ASIZE; j++)
            {
                a_CPU[i][j] = (b_CPU[i - 1][j] + b_CPU[i + 1][j] + b_CPU[i][j - 1] + b_CPU[i][j + 1]) / 4.0f;
            }
        }

#if LOOP_TILING == 1
#pragma acc loop tile(16,16)
#endif
#pragma omp parallel for shared(a_CPU,b_CPU) private(i,j)
        for (i = 0; i < ASIZE_2; i++)
        {
            for (j = 0; j < ASIZE_2; j++)
            {
                b_CPU[i][j] = a_CPU[i][j];
            }
        }
    }

    done_time = my_timer ();
    printf ("Reference CPU time = %lf sec\n", done_time - strt_time);
#if VERIFICATION == 1
	{
		double cpu_sum = 0.0;
		double gpu_sum = 0.0;
    	double rel_err = 0.0;

		for (i = 1; i <= ASIZE; i++)
    	{
        	cpu_sum += b_CPU[i][i]*b_CPU[i][i];
			gpu_sum += b[i][i]*b[i][i];
    	}

		cpu_sum = sqrt(cpu_sum);
		gpu_sum = sqrt(gpu_sum);
		if( cpu_sum > gpu_sum) {
			rel_err = (cpu_sum-gpu_sum)/cpu_sum;
		} else {
			rel_err = (gpu_sum-cpu_sum)/cpu_sum;
		}

		if(rel_err < 1e-9)
		{
	    	printf("Verification Successful err = %e\n", rel_err);
		}
		else
		{
	    	printf("Verification Fail err = %e\n", rel_err);
		}
	}
#else
	{
		double cpu_sum = 0.0;
		double gpu_sum = 0.0;
    	double rel_err = 0.0;
		int error_found = 0;

        for (i = 1; i <= ASIZE; i++)
        {
            for (j = 1; j <= ASIZE; j++)
            {
        		cpu_sum = b_CPU[i][j];
				gpu_sum = b[i][j];
				if( cpu_sum == gpu_sum ) {
					continue;
				}
				if( cpu_sum > gpu_sum) {
					if( cpu_sum == 0.0 ) {
						rel_err = cpu_sum-gpu_sum;
					} else {
						rel_err = (cpu_sum-gpu_sum)/cpu_sum;
					}
				} else {
					if( cpu_sum == 0.0 ) {
						rel_err = gpu_sum-cpu_sum;
					} else {
						rel_err = (gpu_sum-cpu_sum)/cpu_sum;
					}
				}
				if(rel_err < 0.0) {
					rel_err = -1*rel_err;
				}

				if(rel_err >= 1e-9)
				{
					error_found = 1;
					break;
				}
			}
			if( error_found == 1 ) {
				break;
			}
		}
		if( error_found == 0 )
		{
	    	printf("Verification Successful\n");
		}
		else
		{
	    	printf("Verification Fail err = %e\n", rel_err);
		}
	}
#endif
#endif


#ifdef CHECK_RESULT
    for (i = 1; i <= ASIZE; i++)
    {
        sum += b[i][i];
    }
    printf("Diagonal sum = %.10E\n", sum);
#endif

    return 0;
}

